/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/repo": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Repo Metadata
     * @remarks Get metadata for all repositories owned by the user.
     */
    get: operations["list_repo_metadata_repo_get"]
    put?: never
    /**
     * Create Repo
     * @remarks Create a new repository from the provided template.
     */
    post: operations["create_repo_repo_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Repo Metadata
     * @remarks Get metadata for a single repository.
     */
    get: operations["get_repo_metadata_repo__repo_id__get"]
    put?: never
    post?: never
    /**
     * Delete Repo
     * @remarks Delete a repository and its associated data.
     */
    delete: operations["delete_repo_repo__repo_id__delete"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/update": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update Repo Contents
     * @remarks Update the contents of a repository.
     */
    post: operations["update_repo_contents_repo__repo_id__update_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/file/{file_path}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Download File
     * @remarks Read a file from a repository.
     */
    get: operations["download_file_repo__repo_id__file__file_path__get"]
    /**
     * Upload File
     * @remarks Write a file to a repository.
     *
     *     Automatically commits the change and returns the repo info with the updated head.
     */
    put: operations["upload_file_repo__repo_id__file__file_path__put"]
    post?: never
    /**
     * Delete File
     * @remarks Delete a file from a repository.
     *
     *     Automatically commits the change and returns the repo info with the updated head.
     */
    delete: operations["delete_file_repo__repo_id__file__file_path__delete"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/pull": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Pull Remote
     * @remarks Pull changes from the remote repository and merge into the current branch.
     */
    patch: operations["pull_remote_repo__repo_id__pull_patch"]
    trace?: never
  }
  "/repo/{repo_id}/checkout": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Checkout Commit
     * @remarks Checkout a particular commit hash.
     *
     *     Returns the repo info with the updated head.
     */
    patch: operations["checkout_commit_repo__repo_id__checkout_patch"]
    trace?: never
  }
  "/repo/{repo_id}/site": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Visit Deployed Site */
    get: operations["visit_deployed_site_repo__repo_id__site_get"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/agent": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Run Agent
     * @remarks Run a user defined agent from the template repo configuration.
     *
     *     Updates (e.g. agent outputs) are surfaced in real time as Server-Sent Events.
     */
    post: operations["run_agent_repo__repo_id__agent_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/chat": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Chat Log
     * @remarks Retrieve the event log for a repository, including user prompts.
     */
    get: operations["get_chat_log_repo__repo_id__chat_get"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/retrieve": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Retrieve Relevant Content
     * @remarks Retrieve relevant content from a repository based on a query.
     */
    post: operations["retrieve_relevant_content_repo__repo_id__retrieve_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/ask": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Ask Question
     * @remarks Ask a question about the repository and receive a natural language response.
     */
    post: operations["ask_question_repo__repo_id__ask_post"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/repo/{repo_id}/clone": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Clone Repo
     * @remarks Return all readable tracked files in a repository.
     *
     *     If a `commit` is provided, read file contents from that commit; otherwise
     *     read from the working directory.
     */
    get: operations["clone_repo_repo__repo_id__clone_get"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** AgentEvent */
    AgentEvent: {
      /** Name */
      name: string
      /** Content */
      content: string
    }
    /** BuildEvent */
    BuildEvent: {
      /**
       * Event
       * @enum {string}
       */
      event: "start" | "pass" | "fail"
    }
    /** CommittedEvent */
    CommittedEvent: {
      /** Repo Head */
      repo_head: string
    }
    /** DeployedEvent */
    DeployedEvent: {
      /** Url */
      url: string
    }
    /** DoneEvent */
    DoneEvent: Record<string, never>
    /** File */
    File: {
      /**
       * Filename
       * Format: path
       */
      filename: string
      /** Content */
      content: string
    }
    /** FileDeleteOperation */
    FileDeleteOperation: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "delete"
      /**
       * Filename
       * Format: path
       */
      filename: string
    }
    /** FileRenameOperation */
    FileRenameOperation: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "rename"
      /**
       * Old Filename
       * Format: path
       */
      old_filename: string
      /**
       * New Filename
       * Format: path
       */
      new_filename: string
    }
    /** FileWriteOperation */
    FileWriteOperation: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "write"
      /**
       * Filename
       * Format: path
       */
      filename: string
      /** Content */
      content: string
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][]
    }
    /** PagedResponse[RepoLogItem] */
    PagedResponse_RepoLogItem_: {
      /** Items */
      items: components["schemas"]["RepoLogItem"][]
      /** Total Items */
      total_items: number
      /** Next Page */
      next_page?: number | null
    }
    /** PagedResponse[RepoMetadata] */
    PagedResponse_RepoMetadata_: {
      /** Items */
      items: components["schemas"]["RepoMetadata"][]
      /** Total Items */
      total_items: number
      /** Next Page */
      next_page?: number | null
    }
    /** PromptErrorEvent */
    PromptErrorEvent: {
      /** Error */
      error: string
    }
    /** RepoAgentRequest */
    RepoAgentRequest: {
      /** Agent Name */
      agent_name: string
      /** Agent Inputs */
      agent_inputs: {
        [key: string]: string
      }
      /** Overrides */
      overrides?: {
        [key: string]: unknown
      } | null
    }
    /** RepoAskRequest */
    RepoAskRequest: {
      /** Query */
      query: string
    }
    /** RepoAskResponse */
    RepoAskResponse: {
      /** Answer */
      answer: string
    }
    /** RepoCheckoutRequest */
    RepoCheckoutRequest: {
      /** Repo Head */
      repo_head: string
    }
    /**
     * RepoCloneResponse
     * @remarks Response containing all readable files in a repository.
     */
    RepoCloneResponse: {
      /** Files */
      files?: components["schemas"]["RepoClonedFile"][]
    }
    /**
     * RepoClonedFile
     * @remarks Represents a cloned file with its path and full content.
     */
    RepoClonedFile: {
      /** Filename */
      filename: string
      /** Content */
      content: string
    }
    /** RepoCreateFilesSource */
    RepoCreateFilesSource: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "files"
      /** Files */
      files: components["schemas"]["File"][]
    }
    /** RepoCreateGitSource */
    RepoCreateGitSource: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "git"
      /**
       * Url
       * Format: uri
       */
      url: string
      /** Branch */
      branch?: string | null
    }
    /** RepoCreateLegacyRequest */
    RepoCreateLegacyRequest: {
      /**
       * Template
       * @default squack-io/vite-base
       */
      template: string
      /** Template Branch */
      template_branch?: string | null
      /** Metadata */
      metadata?: {
        [key: string]: string
      } | null
      /**
       * Description
       * @deprecated
       */
      description?: string | null
    }
    /** RepoCreateRequest */
    RepoCreateRequest: {
      /** Source */
      source?:
        | (
            | components["schemas"]["RepoCreateGitSource"]
            | components["schemas"]["RepoCreateFilesSource"]
          )
        | null
      /** Metadata */
      metadata?: {
        [key: string]: string
      } | null
    }
    /** RepoInfo */
    RepoInfo: {
      /**
       * Repo Id
       * Format: uuid
       */
      repo_id: string
      /** Repo Head */
      repo_head: string
    }
    /** RepoLogItem */
    RepoLogItem: {
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string
      /**
       * Event Type
       * @enum {string}
       */
      event_type:
        | "user_prompt"
        | "prompt_error"
        | "started"
        | "agent"
        | "tool"
        | "committed"
        | "build"
        | "test"
        | "deployed"
        | "done"
      /** Event */
      event:
        | components["schemas"]["RepoAgentRequest"]
        | components["schemas"]["PromptErrorEvent"]
        | components["schemas"]["StartedEvent"]
        | components["schemas"]["AgentEvent"]
        | components["schemas"]["ToolEvent"]
        | components["schemas"]["CommittedEvent"]
        | components["schemas"]["BuildEvent"]
        | components["schemas"]["TestEvent"]
        | components["schemas"]["DeployedEvent"]
        | components["schemas"]["DoneEvent"]
    }
    /** RepoMetadata */
    RepoMetadata: {
      /**
       * Repo Id
       * Format: uuid
       */
      repo_id: string
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /** Updated At */
      updated_at?: string | null
      /** Metadata */
      metadata?: {
        [key: string]: string
      } | null
    }
    /** RepoPullRequest */
    RepoPullRequest: {
      /** New Branch */
      new_branch?: string | null
    }
    /** RepoRetrieveRequest */
    RepoRetrieveRequest: {
      /** Query */
      query: string
      /** Filter */
      filter?: string | null
      /**
       * Include Content
       * @default false
       */
      include_content: boolean
      /**
       * Score Threshold
       * @default 0.3
       */
      score_threshold: number
      /**
       * Token Limit
       * @default 30000
       */
      token_limit: number
    }
    /** RepoRetrieveResponse */
    RepoRetrieveResponse: {
      /** Results */
      results: components["schemas"]["RepoRetrieveResult"][]
    }
    /** RepoRetrieveResult */
    RepoRetrieveResult: {
      /** Filename */
      filename: string
      /** Score */
      score: number
      /** Content */
      content?: string | null
    }
    /** RepoUpdateDiff */
    RepoUpdateDiff: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "diff"
      /** Operations */
      operations: (
        | components["schemas"]["FileWriteOperation"]
        | components["schemas"]["FileDeleteOperation"]
        | components["schemas"]["FileRenameOperation"]
      )[]
    }
    /** RepoUpdateFiles */
    RepoUpdateFiles: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "files"
      /** Files */
      files: components["schemas"]["File"][]
    }
    /** RepoUpdateGit */
    RepoUpdateGit: {
      /**
       * @remarks discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "git"
      /**
       * Url
       * Format: uri
       */
      url: string
      /** Branch */
      branch?: string | null
    }
    /** RepoUpdateRequest */
    RepoUpdateRequest: {
      /** Source */
      source:
        | components["schemas"]["RepoUpdateFiles"]
        | components["schemas"]["RepoUpdateDiff"]
        | components["schemas"]["RepoUpdateGit"]
    }
    /** StartedEvent */
    StartedEvent: {
      /**
       * Prompt Id
       * Format: uuid
       */
      prompt_id: string
    }
    /** TestEvent */
    TestEvent: {
      /**
       * Event
       * @enum {string}
       */
      event: "start" | "pass" | "fail"
    }
    /** ToolEvent */
    ToolEvent: {
      /** Name */
      name: string
      /** Path */
      path?: string | null
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  list_repo_metadata_repo_get: {
    parameters: {
      query?: {
        filter_metadata?: string | null
        created_after?: string | null
        created_before?: string | null
        order_by?: "created_at" | "updated_at"
        order_descending?: boolean
        page_start?: number
        page_size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PagedResponse_RepoMetadata_"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  create_repo_repo_post: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["RepoCreateRequest"]
          | components["schemas"]["RepoCreateLegacyRequest"]
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoInfo"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_repo_metadata_repo__repo_id__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoMetadata"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  delete_repo_repo__repo_id__delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  update_repo_contents_repo__repo_id__update_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoUpdateRequest"]
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoInfo"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  download_file_repo__repo_id__file__file_path__get: {
    parameters: {
      query?: never
      header?: never
      path: {
        file_path: string
        repo_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  upload_file_repo__repo_id__file__file_path__put: {
    parameters: {
      query?: never
      header?: never
      path: {
        file_path: string
        repo_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/octet-stream": string
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoInfo"]
        }
      }
      /** @remarks Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoInfo"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  delete_file_repo__repo_id__file__file_path__delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        file_path: string
        repo_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoInfo"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  pull_remote_repo__repo_id__pull_patch: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoPullRequest"]
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoInfo"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  checkout_commit_repo__repo_id__checkout_patch: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoCheckoutRequest"]
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoInfo"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  visit_deployed_site_repo__repo_id__site_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  run_agent_repo__repo_id__agent_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoAgentRequest"]
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": unknown
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_chat_log_repo__repo_id__chat_get: {
    parameters: {
      query?: {
        created_after?: string | null
        created_before?: string | null
        /** @remarks Page start index */
        page_start?: number
        /** @remarks Maximum results per page */
        page_size?: number
      }
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PagedResponse_RepoLogItem_"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  retrieve_relevant_content_repo__repo_id__retrieve_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoRetrieveRequest"]
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoRetrieveResponse"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  ask_question_repo__repo_id__ask_post: {
    parameters: {
      query?: never
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoAskRequest"]
      }
    }
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoAskResponse"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  clone_repo_repo__repo_id__clone_get: {
    parameters: {
      query?: {
        commit?: string | null
        as_bundle?: boolean
      }
      header?: never
      path: {
        repo_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @remarks Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["RepoCloneResponse"]
        }
      }
      /** @remarks Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
}
